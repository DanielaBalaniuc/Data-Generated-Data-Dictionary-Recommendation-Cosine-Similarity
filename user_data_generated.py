# -*- coding: utf-8 -*-
"""user_data_generated.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rHPCK8yjwoCozpdDerDEeuWg8FMZfj-9
"""

pip install pandas

import random
import string
import pandas as pd
import numpy as np

# List of skills
skills = ['JavaScript','Python','Typescript','Haskell','C','C++','Java','HTML','C#','SQL','Rust','Go','Lua','PHP','React','Angular','Ruby','R','Shell','Scala','Nix','Swift','Clojure',"Elixir","Perl","Kotlin","Dart","Erlang","F#","Visual Basic .NET","Julia","Assembly","WebAssembly","Fortran","Objective-C","Groovy","SystemVerilog","DM","PowerShell","CodeQL","Emacs Lisp"]

# List of first names
first_names = ['John', 'Jane', 'Michael', 'Emily', 'David', 'Jessica', 'William', 'Sarah', 'Robert', 'Ashley', 'Christopher', 'Ava', 'Daniel', 'Olivia', 'Matthew', 'Isabella', 'James', 'Mia', 'Andrew', 'Abigail']

# List of last names
last_names = ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown', 'Davis', 'Miller', 'Wilson', 'Moore', 'Taylor', 'Anderson', 'Thomas', 'Jackson', 'White', 'Harris', 'Martin', 'Thompson', 'Young', 'Allen', 'King']

# Generate a random number of years of experience in the industry
def generate_experience():
    return random.randint(5, 20)

# Generate a random number of years of experience in the industry
def generate_skills():
  Skills = ({'Python', 'SQL', 'HTML', 'PHP', 'LUA', 'Haskell', 'LUA', 'C', 'C++', 'Kotlin', 'Swift', 'Rub'})
  return random.randint(1, 6)

# Generate a random email address
def generate_email(first_name, last_name):
    domain = ['gmail.com', 'hotmail.com', 'outlook.com', 'yahoo.com']
    return first_name + '.' + last_name + '@' + random.choice(domain)

# Generate a random number of years of experience in the industry
def generate_experience():
    return random.randint(1, 20)

# Generate a random selection of skills
def generate_skills():
    num_skills = random.randint(1, len(skills))
    return random.sample(skills, num_skills)



# Generate a random username
def generate_username():
    letters = string.ascii_lowercase
    username = ''.join(random.choice(letters) for i in range(8))
    return username

# Generate a random number of expererience
import random
def generate_program():
  num_program = random.randint(20, len(program))
  return random.sample(program, num_program)

# Generate a random number of expererience
import random
def generate_work():
  num_work = random.randint(20, len(num_work))
  return random.sample(work, num_work)



from collections import Counter

# word-lists to compare
skills = [ 'JavaScript','Python','Typescript','Haskell','C','C++','Java','HTML','C#','SQL','Rust','Go','Lua','PHP','React','Angular','Ruby','R','Shell','Scala','Nix','Swift','Clojure',"Elixir","Perl","Kotlin","Dart","Erlang","F#","Visual Basic .NET","Julia","Assembly","WebAssembly","Fortran","Objective-C","Groovy","SystemVerilog","DM","PowerShell","CodeQL","Emacs Lisp"]
bounties = [ 'JavaScript','Python','Typescript','Haskell','C','C++','Java','HTML','C#','SQL','Rust','Go','Lua','PHP','React','Angular','Ruby','R','Shell','Scala','Nix','Swift','Clojure',"Elixir","Perl","Kotlin","Dart","Erlang","F#","Visual Basic .NET","Julia","Assembly","WebAssembly","Fortran","Objective-C","Groovy","SystemVerilog","DM","PowerShell","CodeQL","Emacs Lisp"]

# count word occurrences
skills_vals = Counter(skills)
bounties_vals = Counter(bounties)

# convert to word-vectors
words  = list(skills_vals.keys() | bounties_vals.keys())
skills_vect = [skills_vals.get(word, 0) for word in words]        # [0, 3, 1, 1, 2, 1]
bounties_vect = [bounties_vals.get(word, 0) for word in words]        # [1, 1, 1, 0, 1, 0]

# find cosine
len_skills  = sum(skillsv*skillsv for skillsv in skills_vect) ** 0.5             # sqrt(7)
len_bounties  = sum(bountiesv*bountiesv for bountiesv in bounties_vect) ** 0.5             # sqrt(4)
dot    = sum(skillsv*bountiesv for skillsv,bountiesv in zip(skills_vect, bounties_vect))    # 3
cosine = dot / (len_skills * len_bounties)                          # 0.5669467
print(cosine)

# Generate a list of dictionaries with user information
def generate_user_data(num_users):
    user_data = []
    for i in range(num_users):
        first_name = random.choice(first_names)
        last_name = random.choice(last_names)
        email = generate_email(first_name, last_name)
        experience = generate_experience()
        user_skills = generate_skills()
        skills_= generate_skills()
        username = generate_username()
        num_skills = random.randint(4,7)
        num_program = random.randint(8,10)
        num_work = random.randint(1,3)
        skills_cosine_similarity = cosine
        bounties_cosine_similarity = cosine

        user_data.append({'username': username, 'first_name': first_name, 'last_name': last_name, 'email': email, 'Python': num_work, 'SQL': num_skills, 
                          'HTML': num_program, 'Javascript': num_work, 'Typescript': num_skills, 'Haskell': num_program, 
                          'C': num_skills, 'Java': num_work,'Rust': num_program, 'Go': num_skills, 'Lua': num_work, 
                          'PHP': num_skills, 'React': num_program, 'Angular': num_skills, 'Ruby': num_work, 'R': num_program, 
                          'Shell': num_skills, 'Scala': num_work, 'Nix': num_program, 
                          'Swift' : num_work, 'Clojure': num_skills,"Elixir": num_program,"Perl": num_work,"Kotlin": num_skills,"Dart": num_program,
                          "Erlang": num_work, "F#": num_skills,"Visual Basic .NET": num_program,"Julia": num_skills,"Assembly": num_work,"WebAssembly": num_skills,
                          "Fortran": num_work,"Objective-C": num_skills,"Groovy": num_work,"SystemVerilog": num_program,"DM": num_skills,
                          "PowerShell": num_work,"CodeQL": num_program,"Emacs Lisp": num_skills, 'experience':(num_work*2+num_skills*2+2*num_program+2*num_work), 'skills': user_skills,
                          'skills_cosine_similarity': cosine, 'bounties_cosine_similarity' : cosine})
    return user_data

# Generate 100 users
user_data = generate_user_data(100)

# Convert the list of dictionaries to a pandas dataframe
user_df = pd.DataFrame(user_data)

# Save the dataframe to a csv file
user_df.to_csv('user_data.csv', index=False)

from collections import Counter

# word-lists to compare
skills = [ 'JavaScript','Python','Typescript','Haskell','C','C++','Java','HTML','C#','SQL','Rust','Go','Lua','PHP','React','Angular','Ruby','R','Shell','Scala','Nix','Swift','Clojure',"Elixir","Perl","Kotlin","Dart","Erlang","F#","Visual Basic .NET","Julia","Assembly","WebAssembly","Fortran","Objective-C","Groovy","SystemVerilog","DM","PowerShell","CodeQL","Emacs Lisp"]
bounties = [ 'JavaScript','Python','Typescript','Haskell','C','C++','Java','HTML','C#','SQL','Rust','Go','Lua','PHP','React','Angular','Ruby','R','Shell','Scala','Nix','Swift','Clojure',"Elixir","Perl","Kotlin","Dart","Erlang","F#","Visual Basic .NET","Julia","Assembly","WebAssembly","Fortran","Objective-C","Groovy","SystemVerilog","DM","PowerShell","CodeQL","Emacs Lisp"]



# Template to count word occurrences
skills_vals = Counter(skills)
bounties_vals = Counter(bounties)

# convert to word-vectors
words  = list(skills_vals.keys() | bounties_vals.keys())
skills_vect = [skills_vals.get(word, 0) for word in words]        # [0, 3, 1, 1, 2, 1]
bounties_vect = [bounties_vals.get(word, 0) for word in words]        # [1, 1, 1, 0, 1, 0]

# find cosine
len_skills  = sum(skillsv*skillsv for skillsv in skills_vect) ** 0.5             # sqrt(7)
len_bounties  = sum(bountiesv*bountiesv for bountiesv in bounties_vect) ** 0.5             # sqrt(4)
dot    = sum(skillsv*bountiesv for skillsv,bountiesv in zip(skills_vect, bounties_vect))    # 3
cosine = dot / (len_skills * len_bounties)                          # 0.5669467
print(cosine)

from collections import Counter

# word-lists to compare
a = ['skills', 'JavaScript','Python','Typescript','Haskell','C','C++','Java','HTML','C#','SQL','Rust','Go','Lua','PHP','React','Angular','Ruby','R','Shell','Scala','Nix','Swift','Clojure',"Elixir","Perl","Kotlin","Dart","Erlang","F#","Visual Basic .NET","Julia","Assembly","WebAssembly","Fortran","Objective-C","Groovy","SystemVerilog","DM","PowerShell","CodeQL","Emacs Lisp"]
b = ['bounties', 'JavaScript','Python','Typescript','Haskell','C','C++','Java','HTML','C#','SQL','Rust','Go','Lua','PHP','React','Angular','Ruby','R','Shell','Scala','Nix','Swift','Clojure',"Elixir","Perl","Kotlin","Dart","Erlang","F#","Visual Basic .NET","Julia","Assembly","WebAssembly","Fortran","Objective-C","Groovy","SystemVerilog","DM","PowerShell","CodeQL","Emacs Lisp"]

# count word occurrences
a_vals = Counter(a)
b_vals = Counter(b)

# convert to word-vectors
words  = list(a_vals.keys() | b_vals.keys())
a_vect = [a_vals.get(word, 0) for word in words]        # [0, 3, 1, 1, 2, 1]
b_vect = [b_vals.get(word, 0) for word in words]        # [1, 1, 1, 0, 1, 0]

# find cosine
len_a  = sum(av*av for av in a_vect) ** 0.5             # sqrt(7)
len_b  = sum(bv*bv for bv in b_vect) ** 0.5             # sqrt(4)
dot    = sum(av*bv for av,bv in zip(a_vect, b_vect))    # 3
cosine = dot / (len_a * len_b)                          # 0.5669467
print(cosine)

